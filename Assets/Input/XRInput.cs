//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Input/XRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/XRInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @XRInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @XRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInput"",
    ""maps"": [
        {
            ""name"": ""Grab"",
            ""id"": ""285997a5-8cfe-4b46-b5a6-a26b6494d19e"",
            ""actions"": [
                {
                    ""name"": ""grabLeft"",
                    ""type"": ""PassThrough"",
                    ""id"": ""679e0e8a-0e7a-4e89-bb71-f127cc181641"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""grabRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0da73b62-b4db-470a-a310-d69a3fc54d1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5497acd8-8469-447a-9206-021590115357"",
                    ""path"": ""<XRController>{LeftHand}/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0639aeb-2195-4b5e-8985-f374d6cf5a43"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12e6d047-d44d-4c64-8fa1-0c46aadab892"",
                    ""path"": ""<XRController>{LeftHand}/squeezePressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56cd702b-29d8-4dfa-a13c-4d691157313c"",
                    ""path"": ""<XRController>{LeftHand}/selectPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37f822a4-0b3e-4805-a07a-685c4199c7c1"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6056f55e-f812-4e11-a345-df5ccbb19c75"",
                    ""path"": ""<XRController>{RightHand}/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69d72eed-74d0-408c-bc18-285187e75692"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0e031c9-615f-4443-b3dc-417f6c835d95"",
                    ""path"": ""<XRController>{RightHand}/squeezePressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2512df8-d1fe-46ea-98fb-07d45719ef2b"",
                    ""path"": ""<XRController>{RightHand}/selectPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b44d0be-6133-466f-875f-21cb043fd629"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grabRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PositionTracking"",
            ""id"": ""0b602959-cebc-45c2-9db6-433de91715d5"",
            ""actions"": [
                {
                    ""name"": ""positionLeft"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f08b3b65-412f-41c0-8e20-328f9f2ab8a7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""positionRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e979025-1dc6-4343-84c2-ef849ed274c4"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c8834f4-0d32-43a2-b9e1-23f896040590"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""positionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82724f9c-c5c4-4681-bf4f-e4d589de6fbc"",
                    ""path"": ""<PalmPose>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""positionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56e99b1f-10a2-4e29-ba1b-2fe9e2fa2e21"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""positionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e23a22a0-b2bb-4dfd-92b9-fec125045f47"",
                    ""path"": ""<PalmPose>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""positionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Grab
        m_Grab = asset.FindActionMap("Grab", throwIfNotFound: true);
        m_Grab_grabLeft = m_Grab.FindAction("grabLeft", throwIfNotFound: true);
        m_Grab_grabRight = m_Grab.FindAction("grabRight", throwIfNotFound: true);
        // PositionTracking
        m_PositionTracking = asset.FindActionMap("PositionTracking", throwIfNotFound: true);
        m_PositionTracking_positionLeft = m_PositionTracking.FindAction("positionLeft", throwIfNotFound: true);
        m_PositionTracking_positionRight = m_PositionTracking.FindAction("positionRight", throwIfNotFound: true);
    }

    ~@XRInput()
    {
        UnityEngine.Debug.Assert(!m_Grab.enabled, "This will cause a leak and performance issues, XRInput.Grab.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PositionTracking.enabled, "This will cause a leak and performance issues, XRInput.PositionTracking.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grab
    private readonly InputActionMap m_Grab;
    private List<IGrabActions> m_GrabActionsCallbackInterfaces = new List<IGrabActions>();
    private readonly InputAction m_Grab_grabLeft;
    private readonly InputAction m_Grab_grabRight;
    /// <summary>
    /// Provides access to input actions defined in input action map "Grab".
    /// </summary>
    public struct GrabActions
    {
        private @XRInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GrabActions(@XRInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Grab/grabLeft".
        /// </summary>
        public InputAction @grabLeft => m_Wrapper.m_Grab_grabLeft;
        /// <summary>
        /// Provides access to the underlying input action "Grab/grabRight".
        /// </summary>
        public InputAction @grabRight => m_Wrapper.m_Grab_grabRight;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Grab; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GrabActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GrabActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GrabActions" />
        public void AddCallbacks(IGrabActions instance)
        {
            if (instance == null || m_Wrapper.m_GrabActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GrabActionsCallbackInterfaces.Add(instance);
            @grabLeft.started += instance.OnGrabLeft;
            @grabLeft.performed += instance.OnGrabLeft;
            @grabLeft.canceled += instance.OnGrabLeft;
            @grabRight.started += instance.OnGrabRight;
            @grabRight.performed += instance.OnGrabRight;
            @grabRight.canceled += instance.OnGrabRight;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GrabActions" />
        private void UnregisterCallbacks(IGrabActions instance)
        {
            @grabLeft.started -= instance.OnGrabLeft;
            @grabLeft.performed -= instance.OnGrabLeft;
            @grabLeft.canceled -= instance.OnGrabLeft;
            @grabRight.started -= instance.OnGrabRight;
            @grabRight.performed -= instance.OnGrabRight;
            @grabRight.canceled -= instance.OnGrabRight;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GrabActions.UnregisterCallbacks(IGrabActions)" />.
        /// </summary>
        /// <seealso cref="GrabActions.UnregisterCallbacks(IGrabActions)" />
        public void RemoveCallbacks(IGrabActions instance)
        {
            if (m_Wrapper.m_GrabActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GrabActions.AddCallbacks(IGrabActions)" />
        /// <seealso cref="GrabActions.RemoveCallbacks(IGrabActions)" />
        /// <seealso cref="GrabActions.UnregisterCallbacks(IGrabActions)" />
        public void SetCallbacks(IGrabActions instance)
        {
            foreach (var item in m_Wrapper.m_GrabActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GrabActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GrabActions" /> instance referencing this action map.
    /// </summary>
    public GrabActions @Grab => new GrabActions(this);

    // PositionTracking
    private readonly InputActionMap m_PositionTracking;
    private List<IPositionTrackingActions> m_PositionTrackingActionsCallbackInterfaces = new List<IPositionTrackingActions>();
    private readonly InputAction m_PositionTracking_positionLeft;
    private readonly InputAction m_PositionTracking_positionRight;
    /// <summary>
    /// Provides access to input actions defined in input action map "PositionTracking".
    /// </summary>
    public struct PositionTrackingActions
    {
        private @XRInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PositionTrackingActions(@XRInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PositionTracking/positionLeft".
        /// </summary>
        public InputAction @positionLeft => m_Wrapper.m_PositionTracking_positionLeft;
        /// <summary>
        /// Provides access to the underlying input action "PositionTracking/positionRight".
        /// </summary>
        public InputAction @positionRight => m_Wrapper.m_PositionTracking_positionRight;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PositionTracking; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PositionTrackingActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PositionTrackingActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PositionTrackingActions" />
        public void AddCallbacks(IPositionTrackingActions instance)
        {
            if (instance == null || m_Wrapper.m_PositionTrackingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PositionTrackingActionsCallbackInterfaces.Add(instance);
            @positionLeft.started += instance.OnPositionLeft;
            @positionLeft.performed += instance.OnPositionLeft;
            @positionLeft.canceled += instance.OnPositionLeft;
            @positionRight.started += instance.OnPositionRight;
            @positionRight.performed += instance.OnPositionRight;
            @positionRight.canceled += instance.OnPositionRight;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PositionTrackingActions" />
        private void UnregisterCallbacks(IPositionTrackingActions instance)
        {
            @positionLeft.started -= instance.OnPositionLeft;
            @positionLeft.performed -= instance.OnPositionLeft;
            @positionLeft.canceled -= instance.OnPositionLeft;
            @positionRight.started -= instance.OnPositionRight;
            @positionRight.performed -= instance.OnPositionRight;
            @positionRight.canceled -= instance.OnPositionRight;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PositionTrackingActions.UnregisterCallbacks(IPositionTrackingActions)" />.
        /// </summary>
        /// <seealso cref="PositionTrackingActions.UnregisterCallbacks(IPositionTrackingActions)" />
        public void RemoveCallbacks(IPositionTrackingActions instance)
        {
            if (m_Wrapper.m_PositionTrackingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PositionTrackingActions.AddCallbacks(IPositionTrackingActions)" />
        /// <seealso cref="PositionTrackingActions.RemoveCallbacks(IPositionTrackingActions)" />
        /// <seealso cref="PositionTrackingActions.UnregisterCallbacks(IPositionTrackingActions)" />
        public void SetCallbacks(IPositionTrackingActions instance)
        {
            foreach (var item in m_Wrapper.m_PositionTrackingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PositionTrackingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PositionTrackingActions" /> instance referencing this action map.
    /// </summary>
    public PositionTrackingActions @PositionTracking => new PositionTrackingActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Grab" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GrabActions.AddCallbacks(IGrabActions)" />
    /// <seealso cref="GrabActions.RemoveCallbacks(IGrabActions)" />
    public interface IGrabActions
    {
        /// <summary>
        /// Method invoked when associated input action "grabLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrabLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "grabRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrabRight(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PositionTracking" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PositionTrackingActions.AddCallbacks(IPositionTrackingActions)" />
    /// <seealso cref="PositionTrackingActions.RemoveCallbacks(IPositionTrackingActions)" />
    public interface IPositionTrackingActions
    {
        /// <summary>
        /// Method invoked when associated input action "positionLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPositionLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "positionRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPositionRight(InputAction.CallbackContext context);
    }
}
